import java.lang.reflect.Array;import java.util.Arrays;import java.util.Comparator;import java.util.List;import java.util.function.Predicate;import java.util.stream.Collectors;import java.util.stream.Stream;public class StreamAPI {    public static void main(String[] args) {//        Predicate<Integer> predi = new Predicate<Integer>() {//            @Override//            public boolean test(Integer integer) {//                return integer % 2 == 1;//            }//        };        Predicate<Integer> predi = (Integer n) -> {            return n % 2 ==1;        };        List<Integer>  nums = Arrays.asList(1,2,3,4,5,6,7);        String res =                nums.stream()                        //odd number//                        .filter(n-> n % 2 == 1)                        .filter(predi)                        //each odd number  * 2                        .map(n -> n * 2)                        //sorted value                        .sorted(Comparator.comparingInt(Integer::intValue))                        //collect the list                        .collect(Collectors.toList())                        //convert to string                        .toString();                         System.out.println(res);                         Integer res1 = nums.stream().reduce(0,(a, b) -> a + b);                         System.out.println(res1);    }}